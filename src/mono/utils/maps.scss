@use 'sass:map';
@use 'sass:list';

/// Get sorted map by values.
/// 
/// @param {map} $map - The map to sort by values.
/// 
/// @returns {map} - The sorted map by values.
@function map-sort-by-values($map) {
  // Transform map to zipped list
  $keys: ();
  $values: ();

  @each $key, $val in $map {
    $keys: append($keys, $key);
    $values: append($values, $val);
  }

  $list: zip($keys, $values);

  $sortedMap: ();
  @while length($list) > 0 {

    // Find smallest pair
    $smallestPair: nth($list, 1);
    @each $pair in $list {
      $value: nth($pair, 2);
      $smallestValue: nth($smallestPair, 2);
      @if $value < $smallestValue {
        $smallestPair: $pair;
      }
    }

    // Add smallest pair to sorted map
    $key: nth($smallestPair, 1);
    $value: nth($smallestPair, 2);
    $sortedMap: map-merge($sortedMap, ($key: $value));

    // Remove from list smallest pair
    $smallestPairIndex: index($list, $smallestPair);
    $newList: ();
    @for $i from 1 through length($list) {
      @if $i != $smallestPairIndex {
        $newList: append($newList, nth($list, $i), "space");
      }
    }
    $list: $newList;
  }

  @return $sortedMap;
}

/// Get unquoted value from the map
/// 
/// @param {map} $map - The map to get the value from.
/// @param {string} $keys - The key to get the value from the map.
/// 
/// @returns {any} - The unquoted value.
@function map-get-plain($map, $keys...) {
  $value: map.get($map, $keys...);
  @return safe-unquote($value);
}