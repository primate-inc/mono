@use 'sass:meta';
@use 'sass:math';
@use 'sass:list';
@use 'sass:string';

@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}

@function is-not-rem($value) {
  @return is-number($value) and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;
}

// Remove the unit of a length
// @param {Number} $value - Number to remove unit from
// @return {Number} - Unitless number
@function strip-unit($value) {
  $number: to-number($value);

  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

// Change px to em
// @param {Number} $value - Value in px or unitless
// @return {Number} - Value in em
@function em($value) {
  $base_font: config('typography', 'baseFontSize');
  $pixels: strip-unit($value);
  $output: math.div($pixels, $base_font);
  @return $output * 1em;
}

// Number to rem
// @param {Number} $value - Value in px or unitless
// @return {Number} - Value in rem
@function rem($value) {
  $base_font: config('typography', 'baseFontSize');
  $pixels: strip-unit($value);
  $output: math.div($pixels, $base_font);
  @return $output * 1rem;
}

// Change px to rem
@function px-to-rem($value) {
  $unit: false;

  @if type-of($value) == 'number' {
    $unit: unit($value);
  }

  @if ($unit == 'rem') {
    @return $value;
  } @else if ($unit == 'px' or $unit == '') {
    @return rem($value);
  } @else {
    @return false;
  }
}

// Returns 0 if $value is negative
@function not-less-than-zero($value) {
  @return if(strip-unit($value) < 0, 0, $value);
}

// Return $min if $value is lower
@function not-less-than($value, $min: 0) {
  @return if(strip-unit($value) < strip-unit($min), $min, $value);
}

// toFixed() function in Sass
// @param {Number} $float - Number to format
// @param {Number} $digits [2] - Number of digits to leave
// @return {Number}
@function to-fixed($float, $digits: 2) {
  $sass-precision: 5;
  
  @if $digits > $sass-precision {
    @warn "Sass sets default precision to #{$sass-precision} digits, and there is no way to change that for now."
    + "The returned number will have #{$sass-precision} digits, even if you asked for `#{$digits}`."
    + "See https://github.com/sass/sass/issues/1122 for further informations.";
  }
  
  $pow: math.pow(10, $digits);
  @return math.div(math.round($float * $pow), $pow);
}

@function is-function($string) {
  @if type-of($string) == 'string' {
    @if string.index($string, '(') and string.index($string, ')') == string.length($string) {
      @return true;
    }
  }
  @return false;
}

@function get-function-value($string) {
  $m: str-split(string.slice(str-replace($string, ' ', ''), 1, -2), '(');
  $func: list.nth($m, 1);
  $args: str-split(list.nth($m, 2), ',');

  @if meta.function-exists($func) {
    $value: meta.call(meta.get-function($func), $args...);

    @return $value;
  } @else {
    @error 'Nothing returned for: #{$string}.';
  }

}
