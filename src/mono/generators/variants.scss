@use "sass:list";
@use "sass:string";

/// Find variants of CSS variables from a tokens map
///
/// @param $prefix - The prefix for the CSS variable names
/// @param $excludedKeys - The keys to exclude from the variants
/// @param $keys... - The keys to access the tokens map
@mixin find-variants($prefix, $excludedKeys, $keys...) {
    $value: token($keys...);
    $originalKeys: $keys;

    // Recursively iterate through the value map
    @if (type-of($value) == map) {
        @each $k, $v in $value {
            $newKeys: list.append($keys, $k);
            @include find-variants($prefix, $excludedKeys, $newKeys...);
        }
    } @else {
        $variableBase: (list.nth($keys, -1));

        @if string.index($variableBase, ":") != null {
            $variableBase: list.append(list.nth($keys, -2), $variableBase);
        }

        $excludedKeys: list.join($excludedKeys, $variableBase);

        // Remove excluded keys from the keys list
        @each $excludedKey in $excludedKeys {
            $keys: remove-nth($keys, list.index($keys, $excludedKey));
        }

        $variableBase: to-string($variableBase, '-');
        $variableBase: str-replace($variableBase, ":", "-");

        $class: "-";

        // Generate class name based on keys
        @each $key in $keys {
            @if (string.index($key, "@") == null) {
                $class: $class + "-" + $key;
            } @else {
                @warn 'Invalid key found: #{$key}';
            }
        }

        @if $value != null {
            // Find the default value for the variant
            $defaultValueKeys: null;
            $defaultValue: null;

            @each $key in $originalKeys {
                @if (string.index($key, "@") != null) {
                    // Replace the second list item with 'default'
                    @if $key != '@xx' {
                        $defaultValueKeys: replace-nth($originalKeys, 2, '@xx');
                    }
                }
            }

            // Resolve the default value
            @if $defaultValueKeys {
                $defaultValue: token($defaultValueKeys...);
            }

            // If the value is the same as default value, return the variant CSS
            @if $value != $defaultValue {
                &#{$class} {
                    #{'--' + $prefix + '-' + $variableBase}: $value;
                }
            }
        }
    }
}

/// Generate variants of CSS variables from a tokens map
///
/// @param $prefix - The prefix for the CSS variable names
/// @param $group - The group name for the tokens
/// @param $keys... - The keys to access the tokens map
@mixin variants($prefix, $group, $keys...) {
  $breakpoints: sortedBreakpoints();

  @each $screen, $value in $breakpoints {
    $keysGroup: ($group, $screen);
    $newKeys: list.join($keysGroup, $keys);
    $excludedKeys: $newKeys;

    @include screen($screen) {
      @include find-variants($prefix, $excludedKeys, $newKeys...);
    }
  }
}
