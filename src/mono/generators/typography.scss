@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use 'sass:string';

/// Calculate fluid typography values.
/// 
/// @param {number} $min-value - The minimum value for the fluid typography.
/// @param {number} $max-value - The maximum value for the fluid typography.
/// @param {number} $min-screen - The minimum screen width for the fluid typography.
/// @param {number} $max-screen - The maximum screen width for the fluid typography.
/// 
/// @returns {number} - The calculated fluid typography clamp value.
@function calculate_fluid($min-value, $max-value, $min-screen, $max-screen) {
  @if $min-value == $max-value {
    @return $min-value;
  }

  $factor: calc(calc(1 / calc($max-screen - $min-screen)) * calc($max-value - $min-value));
  $rem: $min-value - $min-screen * $factor;
  $vw: (100 * $factor) * 1vw;

  $clamp: clamp($min-value, calc($vw + $rem), $max-value);
  @return $clamp;
}

/// Generate fluid typography styles.
/// 
/// @param {string} $font-name - The name of the font to generate fluid typography for.
/// 
/// @returns {void} - Fluid typography styles for given font name.
@mixin fluid($font-name) {
  $range-start: config(typography, fluid, $font-name, start); 
  $range-end: config(typography, fluid, $font-name, end);

  $start-breakpoint: token(font, $range-start, $font-name);
  $end-breakpoint: token(font, $range-end, $font-name);

  $min-screen-width: 10rem;
  @if token(breakpoints, $range-start) != null {
    $min-screen-width: token(breakpoints, $range-start);
  }
  $max-screen-width: token(breakpoints, $range-end);
  
  $min-font-size: rem(map-get($start-breakpoint, fontSize));
  $max-font-size: rem(map-get($end-breakpoint, fontSize));
  $min-line-height: rem(map-get($start-breakpoint, lineHeight));
  $max-line-height: rem(map-get($end-breakpoint, lineHeight));
  $min-letter-spacing: rem(map-get($start-breakpoint, letterSpacing));
  $max-letter-spacing: rem(map-get($end-breakpoint, letterSpacing));

  font-size: calculate_fluid($min-font-size, $max-font-size, $min-screen-width, $max-screen-width);
  line-height: calculate_fluid($min-line-height, $max-line-height, $min-screen-width, $max-screen-width);
  letter-spacing: calculate_fluid($min-letter-spacing, $max-letter-spacing, $min-screen-width, $max-screen-width);
}

/// Generates font styles with all breakpoints that were defined in the tokens map.
/// 
/// @param {string} $token - The token name to generate font styles for.
/// 
/// @returns {void} - Responsive font styles for given token.
@mixin typography($token) {
  $properties: map-get($tokens, "font");

  @each $breakpoint, $sizes in $properties {
    $size: map-get($sizes, $token);

    @if $size != null {
      $fluid: config(typography, fluid, $token);
      $font-family: map-get($size, 'fontFamily');
      $remaped-font-family: null;

      @if config(typography, fontRemaps, $font-family) != null {
        $remaped-font-family: string.unquote("#{config(typography, fontRemaps, $font-family)}");
      }

      @if config(typography, fontFallbacks, $font-family) != null {
        @if $remaped-font-family != null {
          $font-family: string.unquote("#{$remaped-font-family}, #{config(typography, fontFallbacks, $font-family)}");
        } @else {
          $font-family: string.unquote("#{$font-family}, #{config(typography, fontFallbacks, $font-family)}");
        }
      }

      @include screen($breakpoint) {
        font-size: rem(map-get($size, 'fontSize') * 1px);
        line-height: rem(map-get($size, 'lineHeight') * 1px);
        letter-spacing: map-get($size, 'letterSpacing') * 1px;
        font-weight: map-get($size, 'fontWeight');
        font-style: map-get($size, 'fontStyle');
        font-stretch: map-get($size, 'fontStretch');
        text-indent: rem(map-get($size, 'paragraphIndent') * 1px);
        text-transform: map-get($size, 'textCase');
        text-decoration: map-get($size, 'textDecoration');
        font-family: $font-family;

        @if $fluid != null {
          @if map-get($fluid, 'start') == $breakpoint or map-get($fluid, 'end') == $breakpoint {
            @include fluid($token);
          }
        }

        // Allow for custom styles and overrides to be applied directly to the typography
        @content;
      }
    }
  }
}
