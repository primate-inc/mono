@use 'sass:map';

/// Generate grid layout from the tokens map.
/// 
/// @param {string} $name - The name of the grid layout. Default value is 'main'.
/// @param {boolean} $breakpoint - Whether to include a breakpoint for the grid layout. Default value is false.
/// 
/// @returns {void} - Grid layout for given name and breakpoint.
@mixin grid($name: main, $breakpoint: false) {
  $grid-token: token(grid, $name);
  $grid-width: token(sizes, grid, $name);

  @if($breakpoint) {
    @if (map.has-key(token(grid, $name), $breakpoint)) {
      $grid-token: token(grid, $name, $breakpoint);
    } @else {
      @error 'Value not found. Expected token grid > #{$name} > #{$breakpoint} being a valid grid map.';
    }

    @if (type-of(token(sizes, grid, $name)) == 'map' and map.has-key(token(sizes, grid, $name), $breakpoint)) {
      $grid-width: token(sizes, grid, $name, $breakpoint);
    }
  }

  @if not (map.has-key($grid-token, 'count') and map.has-key($grid-token, 'gutterSize')) {
    @error 'Invalid Value. Expected keys `count` & `gutterSize` to be a defined, instead has: #{map.keys($grid-token)}.';
  }

  $grid-columns: map.get($grid-token, count);
  $grid-gap: rem(map.get($grid-token, gutterSize));
  $grid-offset: rem(map.get($grid-token, offset));
  $grid-free-space: 0; // minmax(0, $grid-gap);

  @if ($grid-width != null and type-of($grid-width) == 'number') {
    $grid-free-space: minmax(0, calc(50% - ($grid-width/2) - $grid-offset));
  }

  $grid-template-columns: ();

  $grid-template-columns: append($grid-template-columns, $grid-free-space);

  $grid-template-columns: append($grid-template-columns, $grid-offset);

  @for $i from 1 through $grid-columns {
    @if ($i == $grid-columns) {
      $grid-template-columns: append($grid-template-columns, 1fr);
    } @else {
      $grid-template-columns: append($grid-template-columns, 1fr);
      $grid-template-columns: append($grid-template-columns, $grid-gap);
    }
  }

  $grid-template-columns: append($grid-template-columns, $grid-offset);

  $grid-template-columns: append($grid-template-columns, $grid-free-space);

  @include screen($breakpoint) {
    display: grid;
    grid-template-columns: $grid-template-columns;
  }
}

/// Creates a responsive grid layout.
/// 
/// @param {string} $name - The name of the grid layout. Default value is 'main'.
///
/// @returns {void} - Responsive grid layout for given name.
@mixin responsive-grid($name: main) {
  $grid-token: token(grid, $name);

  @if($grid-token) {
    @if(type-of($grid-token) == 'map') {
      @each $screen, $value in sortedBreakpoints() {
        $stepSize: map.get($grid-token, $screen);

        @if ($stepSize != null) {
          @include grid($name, $screen);
        }
      }
    } @else {
      @include grid($name);
    }
  }
}

