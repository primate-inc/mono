@use 'sass:map';
@use 'sass:list';
@use 'sass:string';

//
// Generate CSS variables from a tokens map
//

@mixin variables($prefix, $group, $keys...) {
    // $value: map.get($tokens, $keys...);

    @debug '--VAR-------------';
    @debug 'group: ' $group;
    @debug 'keys: ' $keys;
    // @debug 'value: ' $value;
    @debug '--ENDVAR-------------';

    $breakpoints: sortedBreakpoints();
    
    @each $screen, $screenSize in $breakpoints {
        $keysGroup: ($group, $screen);
        $newKeys: list.join($keysGroup, $keys);

        $values: map.get($tokens, $newKeys...);

        @debug '----newKeys';
        @debug $newKeys;
        @debug $values;
        @debug '---------';

        @if $values != null {
            @if type-of($values) == map {
                @include screen($screen) {
                    @each $k, $v in $values {
                        // $valueKeys: list.append($newKeys, $k);
                        // $value: map.get($tokens, $newKeys...);
                        
                        


                        @if $k and $v {
                            // #{'--', $prefix + '-' + $k}: $v;
                            @debug '----variables-----';
                            @debug 'k: ', $k;
                            @debug 'v: ', $v;
                            @debug '---------';

                            #{'--' + $prefix + '-' + $k}: $v;
                        }
                    }
                }
            } @else {
                @debug '----variables-----';
                @debug 'k: ', $newKeys;
                @debug 'value: ', $values;

                $lastKey: list.nth($keys, -1);

                @if $values {
                    @include screen($screen) {
                        #{'--' + $prefix + '-' + $lastKey}: $values;
                    }
                }
            }
        }
    }


    // @if (type-of($value) == map) {
    //     @each $k, $v in $value {
    //         $newKeys: list.append($keys, $k);
    //         @include variables($newKeys...);
    //     }
    // } @else {
    //     $varName: '-';

    //     @each $k in $keys {
    //         // if $k contains -- replace with -
    //         // @if (string.index($k, '--') != null) {
    //         //     $k: string.slice($k, 2);
    //         // }
    //         $varName: $varName + '-' + $k;
    //     }

    //     #{$varName}: $value;

    //     @debug 'varName: ' $varName;
    // }
}

// @mixin defined-variables($prefix, $keys...) {
//     $originalKeys: $keys;
//     $value: map.get($tokens, $keys...);

//     @debug '--Defined Variables-------------';
//     @debug 'prefix: ' $prefix;
//     @debug 'keys: ' $keys;
//     @debug 'value: ' $value;
//     @debug '--END Defined Variables-------------';

//     @if (type-of($value) == map) {
//         @each $k, $v in $value {
//             #{'--' + $prefix + '-' + $k}: $v;
//         }
//     }
// }

@function dig($map, $keys...) {
    $value: map.get($map, $keys...);

    @if (type-of($value) == map) {
        @return dig($value, $keys...);
    } @else {
        @return $value;
    }
}

@mixin dig($map, $keys...) {
    $value: map.get($map, $keys...);

    @if (type-of($value) == map) {
        @each $k, $v in $value {
            $newKeys: list.append($keys, $k);
            @include dig($map, $newKeys...);
        }
    } @else {
        $digValue: $value;
    }
}

@function remove-nth($list, $n) {
    $new-list: ();
    $separator: list.separator($list);
    $i: 1;
    
    @each $element in $list {
      @if $i != $n {
        $new-list: list.append($new-list, $element, $separator: $separator);
      }
      $i: $i + 1;
    }
    
    @return $new-list;
  }

@mixin find-variants($prefix, $excludedKeys, $keys...) {
    $value: map.get($tokens, $keys...);

    // @debug '--Find Variants-------------';
    // @debug 'prefix: ' $prefix;
    // @debug 'excludedKeys: ' $excludedKeys;
    // @debug 'keys: ' $keys;
    // @debug 'value: ' $value;
    // @debug '--END Find Variants-------------';

    @if (type-of($value) == map) {
        @each $k, $v in $value {
            $newKeys: list.append($keys, $k);
            @include find-variants($prefix, $excludedKeys, $newKeys...);
        }
    } @else {
        $lastKey: list.nth($keys, -1);

        // remove excluded keys from keys
        // $lastExcludedKey: list.nth($excludedKeys, -1);
        // $test: list.index($keys, $lastExcludedKey);

        @each $excludedKey in $excludedKeys {
            $keys: remove-nth($keys, list.index($keys, $excludedKey));
        }

        $keys: remove-nth($keys, list.index($keys, $lastKey));

        $class: '-';
        @each $key in $keys {
            @if (string.index($key, '@') == null) {
                $class: $class + '-' + $key;
            }
        }

        // @debug 'class: ' $class;
        // @debug 'keys: ' $keys;
        // @debug 'value: ' $value;


        @if $value != null {
            &#{$class} {
                #{'--' + $prefix + '-' + $lastKey}: $value;
            }
        }

        // #{'--' + $prefix + '-' + $lastKey}: $value;
    }
}

@mixin variants($prefix, $group, $keys...) {
    $breakpoints: sortedBreakpoints();

    // @debug '--Variants-------------';
    // @debug 'prefix: ' $prefix;
    // @debug 'keys: ' $keys;
    // @debug 'excludedKeys: ' $excludedKeys;
    // @debug 'breakpoints: ' $breakpoints;
    // @debug '--END Variants-------------';
    
    @each $screen, $value in $breakpoints {
        $keysGroup: ($group, $screen);
        // $newKeys: list.append($keysGroup, $keys...);
        $newKeys: list.join($keysGroup, $keys);
        $excludedKeys: $newKeys;

        // @debug '----newKeys';
        // @debug $newKeys;
        // @debug '---------';

        @include screen($screen) {
            @include find-variants($prefix, $excludedKeys, $newKeys...);
        }
    }

    // @include find-variants($prefix, $excludedKeys, $keys...);
}

