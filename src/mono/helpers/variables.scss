@use "sass:map";
@use "sass:list";
@use "sass:string";

/// Generate CSS variables from a tokens map
///
/// @param $prefix - The prefix for the CSS variable names
/// @param $group - The group name for the tokens
/// @param $keys... - The keys to access the tokens map
@mixin variables($prefix, $group, $keys...) {
  $breakpoints: sortedBreakpoints();

  @each $screen, $screenSize in $breakpoints {
    $keysGroup: ($group, $screen);
    $newKeys: list.join($keysGroup, $keys);
    $values: map.get($tokens, $newKeys...);

    @if $values != null {
      @if type-of($values) == map {
        @include screen($screen) {
          @each $k, $v in $values {
            @if $k and $v {
              #{'--' + $prefix + '-' + $k}: $v;
            } @else {
              @warn 'No value found for #{$newKeys}';
            }
          }
        }
      } @else {
        $lastKey: list.nth($keys, -1);
        @if $values {
          @include screen($screen) {
            #{'--' + $prefix + '-' + $lastKey}: $values;
          }
        } @else {
          @warn 'No value found for #{$newKeys}';
        }
      }
    }
  }
}

/// Remove the nth element from a list
///
/// @param $list - The list to remove the element from
/// @param $n - The index of the element to remove
/// @return - The new list without the nth element
@function remove-nth($list, $n) {
  $new-list: ();
  $separator: list.separator($list);
  $i: 1;

  @each $element in $list {
    @if $i != $n {
      $new-list: list.append($new-list, $element, $separator: $separator);
    }
    $i: $i + 1;
  }

  @return $new-list;
}

/// Replace the nth element in a list
/// 
/// @param $list - The list to replace the element in
/// @param $n - The index of the element to replace
/// @param $value - The new value
/// @return - The new list with the nth element replaced
@function replace-nth($list, $n, $value) {
  $new-list: ();
  $separator: list.separator($list);
  $i: 1;

  @each $element in $list {
    @if $i == $n {
      $new-list: list.append($new-list, $value, $separator: $separator);
    } @else {
      $new-list: list.append($new-list, $element, $separator: $separator);
    }
    $i: $i + 1;
  }

  @return $new-list;
}

/// Find variants of CSS variables from a tokens map
///
/// @param $prefix - The prefix for the CSS variable names
/// @param $excludedKeys - The keys to exclude from the variants
/// @param $keys... - The keys to access the tokens map
@mixin find-variants($prefix, $excludedKeys, $keys...) {
    $value: map.get($tokens, $keys...);
    $originalKeys: $keys;

    // Recursively iterate through the value map
    @if (type-of($value) == map) {
        @each $k, $v in $value {
            $newKeys: list.append($keys, $k);
            @include find-variants($prefix, $excludedKeys, $newKeys...);
        }
    } @else {
        $lastKey: list.nth($keys, -1);

        // Remove excluded keys from the keys list
        @each $excludedKey in $excludedKeys {
            $keys: remove-nth($keys, list.index($keys, $excludedKey));
        }

        $keys: remove-nth($keys, list.index($keys, $lastKey));
        $class: "-";

        // Generate class name based on keys
        @each $key in $keys {
            @if (string.index($key, "@") == null) {
                $class: $class + "-" + $key;
            } @else {
                @warn 'Invalid key found: #{$key}';
            }
        }

        @if $value != null {
            // Find the default value for the variant
            $defaultValueKeys: null;
            $defaultValue: null;

            @each $key in $originalKeys {
                @if (string.index($key, "@") != null) {
                    // Replace the second list item with 'default'
                    @if $key != '@xx' {
                        $defaultValueKeys: replace-nth($originalKeys, 2, '@xx');
                    }
                }
            }

            // Resolve the default value
            @if $defaultValueKeys {
                $defaultValue: token($defaultValueKeys...);
            }

            // If the value is the same as default value, return the variant CSS
            @if $value != $defaultValue {
                &#{$class} {
                    #{'--' + $prefix + '-' + $lastKey}: $value;
                }
            }
        }
    }
}

/// Generate variants of CSS variables from a tokens map
///
/// @param $prefix - The prefix for the CSS variable names
/// @param $group - The group name for the tokens
/// @param $keys... - The keys to access the tokens map
@mixin variants($prefix, $group, $keys...) {
  $breakpoints: sortedBreakpoints();

  @each $screen, $value in $breakpoints {
    $keysGroup: ($group, $screen);
    $newKeys: list.join($keysGroup, $keys);
    $excludedKeys: $newKeys;

    @include screen($screen) {
      @include find-variants($prefix, $excludedKeys, $newKeys...);
    }
  }
}
